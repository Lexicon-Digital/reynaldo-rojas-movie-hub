// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesAPI.DbContexts;

#nullable disable

namespace MoviesAPI.Migrations
{
    [DbContext(typeof(MovieAPIContext))]
    partial class MovieAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("MoviesAPI.Entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Cinema");
                });

            modelBuilder.Entity("MoviesAPI.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MoviesAPI.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("director");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("genre");

                    b.Property<string>("PrincessTheatreMovieId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("princessTheatreMovieId");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("rating");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("releaseDate");

                    b.Property<int>("Runtime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("runtime");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("synopsis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MoviesAPI.Entities.MovieCinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Showtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("showtime");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("ticketPrice");

                    b.Property<int?>("cinemaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("movieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("cinemaId");

                    b.HasIndex("movieId");

                    b.ToTable("MovieCinema");
                });

            modelBuilder.Entity("MoviesAPI.Entities.PointOfInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("PointsOfInterest");
                });

            modelBuilder.Entity("MoviesAPI.Entities.MovieCinema", b =>
                {
                    b.HasOne("MoviesAPI.Entities.Cinema", "Cinema")
                        .WithMany()
                        .HasForeignKey("cinemaId");

                    b.HasOne("MoviesAPI.Entities.Movie", "Movie")
                        .WithMany("MovieCinema")
                        .HasForeignKey("movieId");

                    b.Navigation("Cinema");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesAPI.Entities.PointOfInterest", b =>
                {
                    b.HasOne("MoviesAPI.Entities.City", "City")
                        .WithMany("PointsOfInterest")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MoviesAPI.Entities.City", b =>
                {
                    b.Navigation("PointsOfInterest");
                });

            modelBuilder.Entity("MoviesAPI.Entities.Movie", b =>
                {
                    b.Navigation("MovieCinema");
                });
#pragma warning restore 612, 618
        }
    }
}
